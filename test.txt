Задание:

    Разбить программу на отдельные классы (каждый класс в отдельном файле)
    Разделить поезда на два типа PassengerTrain и CargoTrain, сделать родителя для классов, который будет содержать общие методы и свойства
    Определить, какие методы могут быть помещены в private/protected и вынести их в такую секцию. В комментарии к методу обосновать, почему он был вынесен в private/protected
    Вагоны теперь делятся на грузовые и пассажирские (отдельные классы). К пассажирскому поезду можно прицепить только пассажирские, к грузовому - грузовые. 
    При добавлении вагона к поезду, объект вагона должен передаваться как аргумент метода и сохраняться во внутреннем массиве поезда, в отличие от предыдущего задания, где мы считали только кол-во вагонов. Параметр конструктора "кол-во вагонов" при этом можно удалить.


Добавить текстовый интерфейс:

Создать программу в файле main.rb, которая будет позволять пользователю через текстовый интерфейс делать следующее:
     - Создавать станции
     - Создавать поезда
     - Создавать маршруты и управлять станциями в нем (добавлять, удалять)
     - Назначать маршрут поезду
     - Добавлять вагоны к поезду
     - Отцеплять вагоны от поезда
     - Перемещать поезд по маршруту вперед и назад
     - Просматривать список станций и список поездов на станции


    У меня вопрос по методу -set_route_to_train-
    Вот код:
    def set_route_to_train
  # список поездов для маршрута
  puts "#{trains_list}"

  # список станций для маршрута
  puts "#{stations_list}"

  # выбрать из этого списка поезд
  puts 'Введите номер поезда.'
  number = gets.chomp.to_s
  
  puts "#{select_train(number)}"
  puts 'Bведите номер маршрута'

  num_route = gets.chomp.to_s
  puts "#{select_route(num_route)}"

  # выбрать из этого списка станции, через которые пойдет поезд
  puts 'Введите название станции.'
  name = gets.chomp.to_s
  puts "#{select_stations(name)}"

  #установить выбранному поезду выбранный маршрут
  # Здесь я застрял

  Я специально написал интерполяцию, чтобы весь код был виден в консоли

  Я написал 
  --# выбрать из этого списка поезд
  puts 'Введите номер поезда.'
  number = gets.chomp.to_s

  Это логично, но у меня нет в классе Route аргумента "number". Мне надо менять код в классе Route или есть другие варианты.
  Вот что получилось

  [#<CargoTrain:0x0000555bdcb72478 @number="100", @type=:cargo, @wagons=nil>]
Список станций: Apple
Grape
Tomato
Apple
Tomato
[#<Station:0x0000555bdcb73c38 @name="Apple", @trains=[]>, #<Station:0x0000555bdcb739e0 @name="Grape", @trains=[]>, #<Station:0x0000555bdcb735f8 @name="Tomato", @trains=[]>, #<Station:0x0000555bdcb73008 @name="Apple", @trains=[]>, #<Station:0x0000555bdcb72ec8 @name="Tomato", @trains=[]>]
Введите номер поезда.
100
[#<CargoTrain:0x0000555bdcb72478 @number="100", @type=:cargo, @wagons=nil>]
Bведите номер маршрута
200
[]
Введите название станции.
Apple
[#<Station:0x0000555bdcb73c38 @name="Apple", @trains=[]>, #<Station:0x0000555bdcb73008 @name="Apple", @trains=[]>]

  
  И еще никак не могу понять, как маршрут запихнуть в поезд.

  На всякий случай отправлю на гитхаб.

  

  Я написал вариант с методом -set_route_to_train-

  def set_route_to_train
    puts "#{ select_route }"
  end

  def select_route
    puts "Введите число, что бы выбрать маршрут."
    choice = gets.chomp.to_i
    @routes.each { |route| puts "Ваш маршрут: #{route.all_stations[0]} - #{route.all_stations[-1]}" }
  end

  Но, когда проверял класс Route, 
  метод - remove_station_from_route -

  def remove_station_from_route
    puts "Назовите станцию, которую нужно удалить: "
    station = gets.chomp.to_s
    @routes.each { |el| el.inters.delete(station) if el.inters.include?(station) }
    puts "Станция #{station} удалена."
  end

  Он удаляет станцию, но может удалить любую, независимо есть ли она на маршруте или нет. Хотя я поставил условие.

  # def set_route_to_train
#   select_route
  # список поездов для маршрута
  #puts "#{trains_list}"

  # список станций для маршрута
  #puts "#{stations_list}"

  # выбрать из этого списка поезд
  
  
  #puts "#{select_train(number)}"
  #puts 'Bведите номер маршрута'

  #num_route = gets.chomp.to_s
  #puts "#{ select_route }"

  # выбрать из этого списка станции, через которые пойдет поезд
  # puts 'Введите название станции.'
  # name = gets.chomp.to_s
  # puts "#{select_stations(name)}"

  #установить выбранному поезду выбранный маршрут
#end

# def trains_list
#   @trains.each { |el| el.number }
# end

# def select_train(number)
#   @trains.select { |el| el.number == number }
# end

# def select_route(num_route)
#   @routes.select { |el| el.all_stations == num_route }
# end

##############################

# def create_wagon(type)
  #   if type == :cargo
  #     CargoWagons.new
  #   elsif type == :passenger
  #     PassengerWagons.new
  #   end
  # end


  def add_wagon
    trains_list
    puts 'Выберите поезд:'
    title = gets.chomp
    pp train = find_train(title)

    puts "Какой тип вагона добавить?"
    type = gets.chomp.to_sym
    wagon = create_wagon(type)
    train.add_wagon(wagon) 
    puts 'Вагон добавлен к поезду.'
  end

  def find_train(title)
    @trains.find { |el| el.number == title }
  end

  def trains_list
    print 'Список поездов: '
    @trains.each { |el| puts el.number }
  end


  # def add_wagon
  
  #   puts 'Это грузовой вагон или пассажирский? 1-(грузовой), 2-(пассажирский). Введите число: '
  #   choice = gets.chomp.to_i

  #   case choice
  #   when 1
  #     train = CargoTrain.new
  #     train.add_wagon(PassengerWagons.new)
  #     puts 'Вагон добавлен к грузовому поезду.'
  #   when 2
  #     PassengerTrain.new(number).add_wagon(PassengerWagons.new)
  #     puts 'Вагон добавлен к пассажирскому поезду.'
  #   else
  #     puts puts 'Что-то пошло не так.'

  #     loop do
  #       puts 'Придется повторить. Введите число: '
  #       choice = gets.chomp.to_i

  #       case choice
  #       when 1 then add_wagon
  #       when 2 then break
  #       else puts 'Повторите ввод.'
  #       end
  #     end
  #   end
  # end

  # def create_wagon(type)
  #   if type == :cargo
  #     CargoWagons.new
  #   elsif type == :passenger
  #     PassengerWagons.new
  #   end
  # end

  # def add_wagon
  #   trains_list
  #   puts 'Выберите поезд:'
  #   choice = gets.chomp.to_i
  #   train = @trains[choice]
  #   puts "Какой тип вагона добавить?"
  #   wagon = CargoWagons.new if train.type == :cargo
  #   wagon = PassengerWagons.new if train.type == :passenger
  #   train.add_wagon(wagon)
  #   puts 'Вагон добавлен к поезду.'
  # end

  # puts "Какой тип вагона добавить?"
    # type = gets.chomp.to_sym
    # wagon = create_wagon(type)
    # train.add_wagon(wagon) 
    # puts 'Вагон добавлен к поезду.'

    # puts "Какой тип вагона добавить?"
    # type = gets.chomp.to_sym
    # if train.type == :cargo
    #   wagon = CargoWagons.new
    #   train.add_wagon(wagon)
    #   puts 'Вагон добавлен к поезду.'
    # else
    #   wagon = PassengersWagons.new
    #   train.add_wagon(wagon)
    #   puts 'Вагон добавлен к поезду.'
    # end